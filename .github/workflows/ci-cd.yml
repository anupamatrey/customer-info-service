name: Build and Deploy to ECS

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: 'us-east-1'
      AWS_ACCOUNT_ID: '952849651017'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set executable permission for Gradle wrapper
        run: chmod +x gradlew

      - name: Set up Java
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      - name: Build with Gradle
        run: ./gradlew clean build

      - name: Configure AWS Credential
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login into AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          mask-password: 'true'

      - name: Retrieve secrets from AWS Secrets Manager
        env:
          SECRET_1: ${{ secrets.SECRET_1 }}
          SECRET_2: ${{ secrets.SECRET_2 }}
        run: |
          export SECRET_1=$(aws secretsmanager get-secret-value --secret-id key1 --query 'SecretString' --output text)
          export SECRET_2=$(aws secretsmanager get-secret-value --secret-id key2 --query 'SecretString' --output text)

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
          IMAGE_TAG: ${{github.sha}}
          ECR_REPOSITORY: 'customer-service-repository'
          SECRET_1: ${{ env.SECRET_1 }}
          SECRET_2: ${{ env.SECRET_2 }}
        run: |
          # Build a docker image, push to ECR and deployed to ECS
          docker build --build-arg SECRET_1=$SECRET_1 --build-arg SECRET_2=$SECRET_2 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: customer-service-task.json
          container-name: customer-service-container
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: customer-information-service1
          cluster: CustomerServiceCluster
          wait-for-service-stability: true
          aws-region: us-east-1

